import{B as m,n as l,g as d}from"./IaO6qu-2.js";const f=[10,20,50],P=10,S=m("card",{state:()=>({userCards:[],allCards:[],loading:!1,error:null,pagination:{totalItems:0,itemCount:0,itemsPerPage:10,totalPages:0,currentPage:1},validPageSizes:f,tradingMarketplace:[],tradingPagination:{totalItems:0,itemCount:0,itemsPerPage:10,totalPages:0,currentPage:1}}),actions:{async fetchCardById(r){const e=d(),t=l();if(!e.token)return null;try{return this.loading=!0,this.error=null,(await $fetch(`${t.public.apiBaseUrl}/user-cards/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e.token}`}})).userCard}catch(a){return console.error("Error fetching card by ID:",a),this.error=a.message||"Failed to fetch card",null}finally{this.loading=!1}},async fetchUserCards(r,e=1,t=10,a={}){const i=d(),n=l();if(i.token)try{this.loading=!0,this.error=null;const o=this.validatePageSize(t),c={page:e,limit:o,...a},s=new URLSearchParams;for(const[p,h]of Object.entries(c))h!=null&&h!==""&&(Array.isArray(h)?h.forEach(y=>{s.append(p,y)}):s.append(p,h.toString()));const g=`${n.public.apiBaseUrl}/user-cards/user/${r}${s.toString()?`?${s.toString()}`:""}`,u=await $fetch(g,{method:"GET",headers:{Authorization:`Bearer ${i.token}`}});this.userCards=u.cards||[],this.pagination=u.pagination||this.pagination}catch(o){console.error("Error fetching user cards:",o),this.error=o.message||"Failed to fetch cards"}finally{this.loading=!1}},async fetchCardsByUsername(r,e){const t=l();try{this.loading=!0,this.error=null,e||(e={}),e.page===void 0&&(e.page=1),e.limit===void 0&&(e.limit=10),e.limit=this.validatePageSize(e.limit);const a=new URLSearchParams;for(const[c,s]of Object.entries(e))s!=null&&s!==""&&(Array.isArray(s)?s.forEach(g=>{a.append(c,g)}):a.append(c,s.toString()));const i=a.toString();let n=`${t.public.apiBaseUrl}/user-cards/username/${r}`;i&&(n+=`?${i}`);const o=await $fetch(n,{method:"GET"});return this.userCards=o.cards||[],this.pagination=o.pagination||this.pagination,this.userCards}catch(a){return console.error("Error fetching cards by username:",a),this.error=a.message||"Failed to fetch cards",[]}finally{this.loading=!1}},async searchUserCards(r,e={}){const t=d(),a=l();if(t.token)try{this.loading=!0,this.error=null,e.page===void 0&&(e.page=1),e.limit===void 0&&(e.limit=10),e.limit=this.validatePageSize(e.limit);const i=new URLSearchParams;for(const[s,g]of Object.entries(e))g!=null&&g!==""&&(Array.isArray(g)?g.forEach(u=>{i.append(s,u)}):i.append(s,g.toString()));const n=i.toString(),o=`${a.public.apiBaseUrl}/user-cards/user/${r}${n?`?${n}`:""}`,c=await $fetch(o,{method:"GET",headers:{Authorization:`Bearer ${t.token}`}});this.userCards=c.cards||[],this.pagination=c.pagination||this.pagination}catch(i){console.error("Error searching user cards:",i),this.error=i.message||"Failed to search cards"}finally{this.loading=!1}},async goToPage(r,e,t={}){if(e<1||e>this.pagination.totalPages)return;const a={...t,page:e};if(t.username){const i=t.username;delete a.username,await this.fetchCardsByUsername(i,a)}else await this.searchUserCards(r,a)},async nextPage(r,e={}){if(this.pagination.currentPage<this.pagination.totalPages){const t={...e,page:this.pagination.currentPage+1};t.limit||(t.limit=this.pagination.itemsPerPage),await this.goToPage(r,this.pagination.currentPage+1,t)}},async prevPage(r,e={}){if(this.pagination.currentPage>1){const t={...e,page:this.pagination.currentPage-1};t.limit||(t.limit=this.pagination.itemsPerPage),await this.goToPage(r,this.pagination.currentPage-1,t)}},async changeItemsPerPage(r,e,t={}){const a=this.validatePageSize(e),i={...t,limit:a,page:1};if(t.username){const n=t.username;delete i.username,await this.fetchCardsByUsername(n,i)}else await this.searchUserCards(r,i)},validatePageSize(r){const e=typeof r=="string"?parseInt(r,10):r;return!isNaN(e)&&f.includes(e)?e:this.pagination&&this.pagination.itemsPerPage&&f.includes(this.pagination.itemsPerPage)?this.pagination.itemsPerPage:P},async addCardToUser(r,e){const t=d(),a=l();if(t.isAdmin)try{this.loading=!0,this.error=null;const i=await $fetch(`${a.public.apiBaseUrl}/user-cards/${r}`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"},body:{scryfallId:e}});return await this.fetchUserCards(r,this.pagination.currentPage,this.pagination.itemsPerPage),i}catch(i){console.error("Error adding card:",i),this.error=i.message||"Failed to add card"}finally{this.loading=!1}},async removeCard(r,e){const t=d(),a=l();if(t.token)try{this.loading=!0,this.error=null,await $fetch(`${a.public.apiBaseUrl}/user-cards/${r}`,{method:"DELETE",headers:{Authorization:`Bearer ${t.token}`}}),await this.fetchUserCards(e,this.pagination.currentPage,this.pagination.itemsPerPage)}catch(i){this.error=i.message||"Failed to remove card"}finally{this.loading=!1}},async revealCard(r,e){const t=d(),a=l();if(t.token)try{this.loading=!0,this.error=null;const i=await $fetch(`${a.public.apiBaseUrl}/user-cards/${r}/reveal`,{method:"PATCH",headers:{Authorization:`Bearer ${t.token}`}});return await this.fetchUserCards(e,this.pagination.currentPage,this.pagination.itemsPerPage),i.userCard}catch(i){console.error("Error revealing card:",i),this.error=i.message||"Failed to reveal card"}finally{this.loading=!1}},async setWillingToTrade(r,e,t){const a=d(),i=l();if(a.token){console.log(t);try{this.loading=!0,this.error=null;const n=await $fetch(`${i.public.apiBaseUrl}/user-cards/${r}/trade-willing`,{method:"PATCH",headers:{Authorization:`Bearer ${a.token}`},body:{willingToTrade:!t}});return await this.fetchUserCards(e,this.pagination.currentPage,this.pagination.itemsPerPage),n.userCard}catch(n){console.error("Error revealing card:",n),this.error=n.message||"Failed to reveal card"}finally{this.loading=!1}}},async searchCards(r){const e=d(),t=l();if(e.token)try{this.loading=!0,this.error=null;const a=new URLSearchParams;for(const[n,o]of Object.entries(r))o&&a.append(n,o.toString());const i=await $fetch(`${t.public.apiBaseUrl}/cards?${a.toString()}`,{method:"GET",headers:{Authorization:`Bearer ${e.token}`}});return this.allCards=i||[],this.allCards}catch(a){return console.error("Error searching cards:",a),this.error=a.message||"Failed to search cards",[]}finally{this.loading=!1}},async fetchCardDetails(r){const e=d(),t=l();if(!e.token)return null;try{return await $fetch(`${t.public.apiBaseUrl}/cards/multiverse/${r}`,{method:"GET",headers:{Authorization:`Bearer ${e.token}`}})}catch(a){return console.error("Error fetching card details:",a),null}},async fetchTradingMarketplace(r={}){const e=l();try{this.loading=!0,this.error=null,r.page===void 0&&(r.page=1),r.limit===void 0&&(r.limit=10),r.hideBasicLands===void 0&&(r.hideBasicLands=!0);const t=new URLSearchParams;for(const[o,c]of Object.entries(r))c!=null&&c!==""&&(Array.isArray(c)?c.forEach(s=>{t.append(o,s)}):t.append(o,c.toString()));const a=t.toString();let i=`${e.public.apiBaseUrl}/user-cards/trading/marketplace`;a&&(i+=`?${a}`);const n=await $fetch(i,{method:"GET"});return this.tradingMarketplace=n.tradingCards||[],this.tradingPagination=n.pagination||this.tradingPagination,this.tradingMarketplace}catch(t){return console.error("Error fetching trading marketplace:",t),this.error=t.message||"Failed to fetch trading marketplace",[]}finally{this.loading=!1}},async goToTradingPage(r,e={}){if(r<1||r>this.tradingPagination.totalPages)return;const t={...e,page:r};await this.fetchTradingMarketplace(t)},async nextTradingPage(r={}){this.tradingPagination.currentPage<this.tradingPagination.totalPages&&await this.goToTradingPage(this.tradingPagination.currentPage+1,r)},async prevTradingPage(r={}){this.tradingPagination.currentPage>1&&await this.goToTradingPage(this.tradingPagination.currentPage-1,r)}}});export{S as u};
