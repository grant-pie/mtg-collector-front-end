import{G as a,l as i,z as c}from"./ap4IkNWM.js";const u=a("deck",{state:()=>({userDecks:[],currentDeck:null,loading:!1,error:null}),actions:{async fetchUserDecks(o){const t=i(),s=c();if(t.token)try{this.loading=!0,this.error=null;const e=await $fetch(`${s.public.apiBaseUrl}/decks/user/${o}`,{method:"GET",headers:{Authorization:`Bearer ${t.token}`}});this.userDecks=e.decks||[]}catch(e){console.error("Error fetching user decks:",e),this.error=e.message||"Failed to fetch decks"}finally{this.loading=!1}},async fetchDeck(o){const t=i(),s=c();if(!t.token)return null;try{this.loading=!0,this.error=null;const e=await $fetch(`${s.public.apiBaseUrl}/decks/${o}`,{method:"GET",headers:{Authorization:`Bearer ${t.token}`}});return e.error?(this.error=e.error,null):(this.currentDeck=e.deck,e.deck)}catch(e){return console.error("Error fetching deck:",e),this.error=e.message||"Failed to fetch deck",null}finally{this.loading=!1}},async createDeck(o){var e;const t=i(),s=c();if(!t.token)return null;try{this.loading=!0,this.error=null;const r=await $fetch(`${s.public.apiBaseUrl}/decks`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"},body:o});return(e=t.user)!=null&&e.id&&await this.fetchUserDecks(t.user.id),r.deck}catch(r){return console.error("Error creating deck:",r),this.error=r.message||"Failed to create deck",null}finally{this.loading=!1}},async createDeckForUser(o,t){var r;const s=i(),e=c();if(!s.token)return null;try{this.loading=!0,this.error=null;const n=await $fetch(`${e.public.apiBaseUrl}/decks/user/${t}`,{method:"POST",headers:{Authorization:`Bearer ${s.token}`,"Content-Type":"application/json"},body:o});return(r=s.user)!=null&&r.id&&await this.fetchUserDecks(s.user.id),n.deck}catch(n){return console.error("Error creating deck:",n),this.error=n.message||"Failed to create deck",null}finally{this.loading=!1}},async updateDeck(o,t){var r;const s=i(),e=c();if(!s.token)return null;try{this.loading=!0,this.error=null;const n=await $fetch(`${e.public.apiBaseUrl}/decks/${o}`,{method:"PUT",headers:{Authorization:`Bearer ${s.token}`,"Content-Type":"application/json"},body:t});return this.currentDeck&&this.currentDeck.id===o&&(this.currentDeck=n.deck),(r=s.user)!=null&&r.id&&await this.fetchUserDecks(s.user.id),n.deck}catch(n){return console.error("Error updating deck:",n),this.error=n.message||"Failed to update deck",null}finally{this.loading=!1}},async removeDeck(o){var e;const t=i(),s=c();if(!t.token)return!1;try{return this.loading=!0,this.error=null,await $fetch(`${s.public.apiBaseUrl}/decks/${o}`,{method:"DELETE",headers:{Authorization:`Bearer ${t.token}`}}),this.currentDeck&&this.currentDeck.id===o&&(this.currentDeck=null),(e=t.user)!=null&&e.id&&await this.fetchUserDecks(t.user.id),!0}catch(r){return console.error("Error removing deck:",r),this.error=r.message||"Failed to remove deck",!1}finally{this.loading=!1}},async addUserCardToDeck(o,t){const s=i(),e=c();if(!s.token)return null;try{if(this.loading=!0,this.error=null,!o||!t)return this.error="Invalid deck or card ID",null;const r=await $fetch(`${e.public.apiBaseUrl}/decks/${o}/user-cards/${t}`,{method:"POST",headers:{Authorization:`Bearer ${s.token}`}});return!r||!r.deck?(this.error="Invalid response received",null):(this.currentDeck&&this.currentDeck.id===o&&(this.currentDeck=r.deck),r.deck)}catch(r){return console.error("Error adding card to deck:",r),this.error=r.message||"Failed to add card to deck",null}finally{this.loading=!1}},async addUserCardToDeckForUser(o,t,s){console.log("addUserCardToDeckForUser");const e=i(),r=c();if(!e.token)return null;try{this.loading=!0,this.error=null;const n=await $fetch(`${r.public.apiBaseUrl}/decks/user/${o}/${t}/user-cards`,{method:"POST",headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"},body:{userCardId:s}});return this.currentDeck&&this.currentDeck.id===t&&(this.currentDeck=n.deck),n.deck}catch(n){return console.error("Error adding card to deck for user:",n),this.error=n.message||"Failed to add card to deck",null}finally{this.loading=!1}},async removeUserCardFromDeck(o,t){const s=i(),e=c();if(!s.token)return null;try{this.loading=!0,this.error=null;const r=await $fetch(`${e.public.apiBaseUrl}/decks/${o}/user-cards/${t}`,{method:"DELETE",headers:{Authorization:`Bearer ${s.token}`}});return this.currentDeck&&this.currentDeck.id===o&&(this.currentDeck=r.deck),r.deck}catch(r){return console.error("Error removing card from deck:",r),this.error=r.message||"Failed to remove card from deck",null}finally{this.loading=!1}}}});export{u};
