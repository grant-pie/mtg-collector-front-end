import{E as o,y as t}from"./DdJi7br2.js";import{u as n}from"./DNdl8xi3.js";const c=o("user",{state:()=>({users:[],publicUsernames:[],loading:!1,error:null,usernameUpdateLoading:!1,usernameUpdateError:null,usernameUpdateSuccess:!1,usernamesLoading:!1,usernamesError:null}),actions:{async fetchAllUsers(){const e=n();if(!e.isAdmin){this.error="Unauthorized: Admin access required";return}if(!e.token){this.error="Authentication required";return}this.loading=!0,this.error=null;try{const r=t(),s=await $fetch(`${r.public.apiBaseUrl}/users`,{headers:{Authorization:`Bearer ${e.token}`}});this.users=s,console.log("Fetched users:",this.users)}catch(r){console.error("Error fetching users:",r),this.error="Failed to load users"}finally{this.loading=!1}},async fetchAllUsernames(){this.usernamesLoading=!0,this.usernamesError=null;try{const e=t(),r=await $fetch(`${e.public.apiBaseUrl}/users/usernames`);this.publicUsernames=r,console.log("Fetched usernames:",this.publicUsernames)}catch(e){console.error("Error fetching usernames:",e),this.usernamesError="Failed to load usernames"}finally{this.usernamesLoading=!1}},async updateUsername(e){var s;const r=n();if(!r.token)return this.usernameUpdateError="Authentication required",!1;this.usernameUpdateLoading=!0,this.usernameUpdateError=null,this.usernameUpdateSuccess=!1;try{const a=t(),i=await $fetch(`${a.public.apiBaseUrl}/users/username`,{method:"PATCH",headers:{Authorization:`Bearer ${r.token}`,"Content-Type":"application/json"},body:JSON.stringify({username:e})});return r.updateUserData({username:e}),this.usernameUpdateSuccess=!0,!0}catch(a){return console.error("Error updating username:",a),this.usernameUpdateError=((s=a.data)==null?void 0:s.message)||"Failed to update username",!1}finally{this.usernameUpdateLoading=!1}},resetUsernameUpdateState(){this.usernameUpdateLoading=!1,this.usernameUpdateError=null,this.usernameUpdateSuccess=!1}}});export{c as u};
